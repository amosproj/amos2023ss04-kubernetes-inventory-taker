# This workflow will build all images and run pre-commit

name: CI
on:
  push:
    branches:
      - develop
  pull_request:

env:
  REGISTRY: ghcr.io
  IMAGES: '[{"image_name": "Explorer", "context": "./Explorer"}, {"image_name": "Proxy", "context": "./Proxy"}]'

jobs:
  pre-commit:
    runs-on: "ubuntu-latest"
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - run: cd Explorer && npm install && cd .. # We use the eslint defined in the package.json
      - run: pip install pre-commit
      - run: pre-commit run --all
        env: { SKIP: golangci-lint-mod }
  golangci-lint-mod:
    runs-on: "ubuntu-latest"
    steps:
      - uses: actions/setup-go@v4
        with:
          go-version: "1.20"
      - uses: actions/checkout@v3
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          # Optional: version of golangci-lint to use in form of v1.2 or v1.2.3 or `latest` to use the latest version
          version: v1.52
          working-directory: Proxy

  build-and-push-images:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Log in to the Container registry
        uses: docker/login-action@4
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Loop over images and build/push
        id: build-and-push
        run: |
          IMAGES="${{ env.IMAGES }}"
          while IFS= read -r line; do
            image_name=$(jq -r '.image_name' <<< "$line")
            context=$(jq -r '.context' <<< "$line")
            echo "Building and pushing image: $image_name"

            docker build -t ${{ env.REGISTRY }}/$image_name $context
            docker push ${{ env.REGISTRY }}/$image_name
          done <<< "$IMAGES"

  unit-test:
    runs-on: "ubuntu-latest"

  setup-kubernetes-cluster:
    runs-on: "ubuntu-latest"
    steps:
      - name: AbsaOSS/k3d-action
        uses: AbsaOSS/k3d-action@v2.4.0
        with:
          cluster-name: "Kubernetes Inventory Test Cluster"
          args: --agents 1

  proxy-integration-test:
    runs-on: "ubuntu-latest"

# This workflow will build all images and run pre-commit

name: CI
on:
  push:
    branches:
      - develop
  pull_request:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  pre-commit-and-jest:
    runs-on: "ubuntu-latest"
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: "npm"
          cache-dependency-path: Explorer/package-lock.json
      - run: cd Explorer && npm ci
      - run: pip install pre-commit
      - name: Run pre-commit
        run: pre-commit run --all
        env: { SKIP: golangci-lint }
      - name: Run jest-tests
        run: cd Explorer && npx -y jest
  golangci-lint-mod:
    runs-on: "ubuntu-latest"
    steps:
      - uses: actions/setup-go@v4
        with:
          go-version-file: Proxy/go.mod
          check-latest: true
          cache-dependency-path: Proxy/go.sum
      - uses: actions/checkout@v3
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          # Optional: version of golangci-lint to use in form of v1.2 or v1.2.3 or `latest` to use the latest version
          version: v1.52
          working-directory: Proxy
          args: --timeout 5m

  build-and-push-images:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - dockerfile: ./Proxy/Dockerfile
            image: proxy
            context: ./Proxy
          - dockerfile: ./Explorer/Dockerfile
            image: explorer
            context: ./Explorer
    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}/${{ matrix.image }}

      - name: Build and push Docker Images
        uses: docker/build-push-action@v4
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.dockerfile }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  #unit-test:
  #runs-on: "ubuntu-latest"

  k8s-cypress-tests:
    runs-on: "ubuntu-latest"
    steps:
      - uses: actions/checkout@v3
      - uses: AbsaOSS/k3d-action@v2.4.0
        with:
          cluster-name: "Test-Cluster"
          args: --agents 1

      - name: Prepare kubeconfig # Copy kubeconfig into /Proxy/.kube folder
        run: |
          cd Proxy && mkdir .kube && cd .kube
          cp -r $HOME/.kube/config .
          cat config

      - name: Start kit
        run: docker compose up -d
      - run: sleep 20 # Wait for the proxy to collect some data

      - name: Cypress run
        uses: cypress-io/github-action@v5
        with:
          working-directory: Explorer
        env:
          CYPRESS_DEFAULT_COMMAND_TIMEOUT: 10000 # Set timeout to 10 seconds


  #proxy-integration-test:
  #runs-on: "ubuntu-latest"
